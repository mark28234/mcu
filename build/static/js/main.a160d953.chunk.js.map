{"version":3,"sources":["components/character/Character.js","components/search-box/SearchBox.js","store/action.js","store/middleware.js","store/store.js","store/reducer.js","App.js","serviceWorker.js","index.js"],"names":["Character","props","id","name","thumbnail","path","extension","src","key","className","alt","timeout","SearchBox","onSearch","type","onChange","callback","wait","value","target","clearTimeout","setTimeout","actionTypes","getState","dispatch","next","action","url","query","fetch","referrer","then","res","json","data","catch","error","storeEnhancers","applyMiddleware","middlewares","store","createStore","state","console","log","loading","characters","results","App","useState","setState","useEffect","subscribe","map","character","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4SAGe,SAASA,EAAUC,GAAQ,IAEtCC,EAGED,EAHFC,GACAC,EAEEF,EAFFE,KAHqC,EAKnCF,EADFG,UAAaC,EAJwB,EAIxBA,KAAMC,EAJkB,EAIlBA,UAEjBC,EAAG,UAAMF,EAAN,YAAcC,GACrB,OACE,yBAAKE,IAAKN,EAAIO,UAAU,aACtB,yBAAKC,IAAKP,EAAMI,IAAKA,IACrB,wBAAIC,IAAKN,GAAKC,I,ICVhBQ,E,MASW,SAASC,EAAUX,GAAQ,IAChCY,EAAaZ,EAAbY,SACR,OACE,yBAAKJ,UAAU,aACb,2BACEK,KAAK,OACLC,SAAU,YAA4B,IAb5BC,EAAUC,EAaGC,EAAc,EAAxBC,OAAUD,MAbbF,EAcC,WACPH,EAASK,IAfOD,EAgBf,IAfPN,GACFS,aAAaT,GAEfA,EAAUU,WAAWL,EAAUC,O,0BCTpBK,EACO,mBADPA,EAEa,yBAFbA,EAGe,2BCD5B,IAwBe,GAxBS,SAAC,GAAD,EAAGC,SAAH,IAAaC,EAAb,EAAaA,SAAb,OAA4B,SAACC,GAAD,OAAU,SAACC,GAC7D,GAAIA,EAAOZ,OAASQ,EAA8B,CAChD,IAAIK,EACF,wGAEED,EAAOE,QACTD,EAAG,UAAMA,EAAN,2BAA4BD,EAAOE,QAGxCC,MAAMF,EAAK,CAAEG,SAAU,yBACpBC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACLR,EAAS,CACPV,KAAMQ,EACNY,KAAMF,EAAIE,UAGbC,OAAM,SAACC,GACNZ,EAAS,CAAEV,KAAMQ,OAGvBG,EAAKC,OCdDW,EAAiBC,IAAe,WAAf,cAAmBC,IAC7BC,EAAQC,aCRN,SAAiBC,EAAOhB,GAErC,OADAiB,QAAQC,IAAIlB,EAAQgB,GACZhB,EAAOZ,MACb,KAAKQ,EACH,OAAO,2BAAKoB,GAAZ,IAAmBG,SAAS,EAAMT,OAAO,IAC3C,KAAKd,EACH,OAAO,2BAAKoB,GAAZ,IAAmBG,SAAS,EAAOT,OAAO,IAC5C,KAAKd,EACH,OAAO,2BACFoB,GADL,IAEEG,SAAS,EACTT,OAAO,EACPU,WAAYpB,EAAOQ,KAAKa,UAE5B,QACE,OAAO,eAAKL,MDdG,CACnBG,SAAS,EACTT,OAAO,EACPU,WAAY,IAI0CT,GEwCzCW,MA1Cf,WAAgB,IAAD,EACaC,mBAAST,EAAMjB,YAD5B,mBACNmB,EADM,KACCQ,EADD,KASb,OAPAC,qBAAU,WACRX,EAAMY,WAAU,WACdF,EAASV,EAAMjB,eAEjBiB,EAAMhB,SAAS,CAAEV,KAAMQ,MACtB,IAGD,yBAAKb,UAAU,OACb,yBAAKA,UAAU,cACb,6BACE,kDAEF,6BACE,kBAAC,EAAD,CACEI,SAAU,SAACe,GACTY,EAAMhB,SAAS,CAAEV,KAAMQ,EAA8BM,eAK7D,yBAAKnB,UAAU,eACZiC,EAAMG,SACL,yBAAKpC,UAAU,cACb,mDAIJ,yBAAKA,UAAU,eACXiC,EAAMG,SACNH,EAAMI,YACNJ,EAAMI,WAAWO,KAAI,SAACC,GAAD,OACnB,kBAAC,EAAD,eAAW9C,IAAK8C,EAAUpD,IAAQoD,WC9B5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAC,GACLO,QAAQP,MAAMA,EAAMkC,c","file":"static/js/main.a160d953.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Character.css\";\r\n\r\nexport default function Character(props) {\r\n  const {\r\n    id,\r\n    name,\r\n    thumbnail: { path, extension },\r\n  } = props;\r\n  let src = `${path}.${extension}`;\r\n  return (\r\n    <div key={id} className=\"Character\">\r\n      <img alt={name} src={src}></img>\r\n      <h5 key={id}>{name}</h5>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./SearchBox.css\";\r\n\r\nlet timeout;\r\n\r\nfunction debounce(callback, wait) {\r\n  if (timeout) {\r\n    clearTimeout(timeout);\r\n  }\r\n  timeout = setTimeout(callback, wait);\r\n}\r\n\r\nexport default function SearchBox(props) {\r\n  const { onSearch } = props;\r\n  return (\r\n    <div className=\"SearchBox\">\r\n      <input\r\n        type=\"text\"\r\n        onChange={({ target: { value } }) => {\r\n          debounce(() => {\r\n            onSearch(value);\r\n          }, 500);\r\n        }}\r\n      ></input>\r\n    </div>\r\n  );\r\n}\r\n","export const actionTypes = {\r\n  FETCH_CHARACTERS: \"FETCH_CHARACTERS\",\r\n  FETCH_CHARACTERS_ERROR: \"FETCH_CHARACTERS_ERROR\",\r\n  FETCH_CHARACTERS_SUCCESS: \"FETCH_CHARACTERS_SUCCESS\",\r\n};\r\n","import { actionTypes } from \"./action\";\r\n\r\nconst fetchCharacters = ({ getState, dispatch }) => (next) => (action) => {\r\n  if (action.type === actionTypes.FETCH_CHARACTERS) {\r\n    let url =\r\n      \"https://gateway.marvel.com:443/v1/public/characters?apikey=4ade67d1009a7f988e0707ceacbf127e&limit=100\";\r\n\r\n    if (action.query) {\r\n      url = `${url}&nameStartsWith=${action.query}`;\r\n    }\r\n\r\n    fetch(url, { referrer: \"developer.marvel.com\" })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        dispatch({\r\n          type: actionTypes.FETCH_CHARACTERS_SUCCESS,\r\n          data: res.data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({ type: actionTypes.FETCH_CHARACTERS_ERROR });\r\n      });\r\n  }\r\n  next(action);\r\n};\r\n\r\nexport default [fetchCharacters];\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport middlewares from \"./middleware\";\r\nconst initialState = {\r\n  loading: false,\r\n  error: false,\r\n  characters: [],\r\n};\r\n\r\nconst storeEnhancers = applyMiddleware(...middlewares);\r\nexport const store = createStore(reducer, initialState, storeEnhancers);\r\n","import { actionTypes } from \"./action\";\r\n\r\nexport default function reducer(state, action) {\r\n  console.log(action, state);\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_CHARACTERS:\r\n      return { ...state, loading: true, error: false };\r\n    case actionTypes.FETCH_CHARACTERS_ERROR:\r\n      return { ...state, loading: false, error: true };\r\n    case actionTypes.FETCH_CHARACTERS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: false,\r\n        characters: action.data.results,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nimport Character from \"./components/character/Character\";\nimport SearchBox from \"./components/search-box/SearchBox\";\nimport { store } from \"./store/store\";\nimport { actionTypes } from \"./store/action\";\n\nfunction App() {\n  const [state, setState] = useState(store.getState());\n  useEffect(() => {\n    store.subscribe(() => {\n      setState(store.getState());\n    });\n    store.dispatch({ type: actionTypes.FETCH_CHARACTERS });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-Header\">\n        <div>\n          <h1>Marvel Characters</h1>\n        </div>\n        <div>\n          <SearchBox\n            onSearch={(query) => {\n              store.dispatch({ type: actionTypes.FETCH_CHARACTERS, query });\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"App-Content\">\n        {state.loading && (\n          <div className=\"App-Loader\">\n            <h4>Loading Characters</h4>\n          </div>\n        )}\n\n        <div className=\"Characters\">\n          {!state.loading &&\n            state.characters &&\n            state.characters.map((character) => (\n              <Character key={character.id} {...character} />\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}